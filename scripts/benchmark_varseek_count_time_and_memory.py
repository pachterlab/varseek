import os
import random
import subprocess
import time

import numpy as np
import pandas as pd
import pysam

import varseek as vk
from varseek.utils import (
    is_program_installed,
    report_time_and_memory_of_script,
    run_command_with_error_logging,
)

### ARGUMENTS ###
number_of_reads_list = [1, 4, 16, 64, 256, 1024]  # number of reads, in millions

read_length = 150
k = 59
w = 54
strand = None  # None for strand-agnostic (randomly-selected), "f" for forward, "r" for reverse, "both" for both - make sure this matches the reference genome (vk build command) - strand = True -> "f" or "r" here; strand = False -> None or "both" here - note that the strand is randomly selected per *transcript*, such that all drawn reads will come from the same strand no matter what
add_noise_sequencing_error = True
add_noise_base_quality = False
error_rate=0.0001  # only if add_noise_sequencing_error=True
error_distribution=(0.85, 0.1, 0.05)  # sub, del, ins  # only if add_noise_sequencing_error=True
max_errors=float("inf")  # only if add_noise_sequencing_error=True
seq_id_column="seq_ID"
var_column="mutation_cdna"
threads = 4
random_seed=42

cosmic_mutations_path = "cosmic_cmc"  # for vk sim   # can replace with path to csv file generated by gget cosmic
reference_cdna_path = "cdna"  # for vk sim   # can replace with path to cdna fasta file (such as that downloaded by gget ref)

tmp_dir = "tmp"
store_reference_files_in_tmp = True  # if True, will store reference files in tmp directory; if False, will store reference files in data directory
### ARGUMENTS ###

varseek_dir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
output_dir = os.path.join(varseek_dir, "logs")

data_dir = os.path.join(tmp_dir, "data") if store_reference_files_in_tmp else os.path.join(varseek_dir, "data")
reference_out_dir = os.path.join(data_dir, "reference")
vk_ref_index_path = os.path.join(data_dir, "vk_count_benchmarking", "vcrs_index_files", "index.idx")  # for vk count; downloaded if does not exist
vk_ref_t2g_path = os.path.join(data_dir, "vk_count_benchmarking", "vcrs_index_files", "t2g.txt")  # for vk count; downloaded if does not exist
reference_genome_index_path = os.path.join(data_dir, "vk_count_benchmarking", "reference_genome_index_files", "index.idx")  # for vk count; downloaded if does not exist
reference_genome_t2g_path = os.path.join(data_dir, "vk_count_benchmarking", "reference_genome_index_files", "t2g.txt")  # for vk count; downloaded if does not exist

# # set random seeds
# random.seed(random_seed)
# np.random.seed(random_seed)

seqtk = "seqtk"

# define tmp subdirectories (to be deleted at the end)
os.makedirs(tmp_dir)  # purposely not using exist_ok=True to ensure that the directory is non-existent
out_dir_vk_build = os.path.join(tmp_dir, "vk_build")
update_df_out = os.path.join(out_dir_vk_build, "updated_df.csv")

os.makedirs(out_dir_vk_build, exist_ok=True)

script_dir = os.path.dirname(os.path.abspath(__file__))  # the parent directory of this current file (this file should be in scripts/)
vk_count_script_path = os.path.join(script_dir, "run_varseek_count_for_benchmarking_time_and_memory.py")

# create synthetic reads
if k and w:
    if k <= w:
        raise ValueError("k must be greater than w")
    read_w = read_length - (k - w)  # note that this does not affect read length, just read *parent* length
else:
    read_w = read_length - 1

#* Make synthetic reads corresponding to the largest value in number_of_reads_list - if desired, I can replace this with real data
cosmic_mutations = pd.read_csv(cosmic_mutations_path)
number_of_variants_to_sample = cosmic_mutations // 200
number_of_reads_max = max(number_of_reads_list) * 10**6  # convert to millions
fastq_output_path_max_reads = os.path.join(tmp_dir, f"reads_{number_of_reads_max}_fastq.fastq")

print(f"Building synthetic reads for {number_of_reads_max} reads")
_ = vk.sim(
    variants = cosmic_mutations,
    reads_fastq_out = fastq_output_path_max_reads,
    number_of_variants_to_sample=number_of_variants_to_sample,
    strand=strand,
    number_of_reads_per_variant_alt=100,
    number_of_reads_per_variant_ref=100,
    read_length=read_length,
    seed=random_seed,
    add_noise_sequencing_error=add_noise_sequencing_error,
    add_noise_base_quality=add_noise_base_quality,
    error_rate=error_rate,
    error_distribution=error_distribution,
    max_errors=max_errors,
    with_replacement=False,
    gzip_reads_fastq_out=False,
    sequences=reference_cdna_path,
    seq_id_column=seq_id_column,
    var_column=var_column,
    reference_out_dir=reference_out_dir,
    vk_build_out_dir=out_dir_vk_build,
    k=k,
    w=w
)

#* Download varseek index
if not os.path.exists(vk_ref_index_path) or not os.path.exists(vk_ref_t2g_path):
    vk_ref_index_dir = os.path.dirname(vk_ref_index_path)
    vk_ref_index_path = os.path.join(vk_ref_index_dir, "index.idx")
    vk_ref_t2g_path = os.path.join(vk_ref_index_dir, "t2g.txt")
    print(f"Downloading varseek index to {vk_ref_index_dir}")
    vk.ref(variants="cosmic_cmc", sequences="cdna", w=47, k=51, dlist_reference_source="t2t", download=True, out=vk_ref_index_dir)

#* install seqtk if not installed
if not is_program_installed(seqtk):
    raise ValueError("seqtk is required to run this script. Please install seqtk and ensure that it is in your PATH.")
    # subprocess.run("git clone https://github.com/lh3/seqtk.git", shell=True, check=True)
    # subprocess.run("cd seqtk && make", shell=True, check=True)
    # seqtk = os.path.join(script_dir, "seqtk/seqtk")

#* Build normal genome reference (for vk clean in vk count)
if not os.path.exists(reference_genome_index_path) or not os.path.exists(reference_genome_t2g_path):  # download reference if does not exist
    # kb ref, reference genome
    kb_ref_command = [
        "kb",
        "ref",
        "-t",
        str(threads),
        "-i",
        reference_genome_index_path,
        "-g",
        reference_genome_t2g_path,
        "-d",
        "human",
    ]

    print("kb ref, reference genome")
    subprocess.run(kb_ref_command, check=True)


#* Run variant calling tools
for number_of_reads in number_of_reads_list:
    number_of_reads *= 10**6  # convert to millions
    if number_of_reads != number_of_reads_max:
        number_of_reads_fraction = number_of_reads / number_of_reads_max
        fastq_output_path = os.path.join(tmp_dir, f"reads_{number_of_reads}_fastq.fastq")
        seqtk_sample_command = f"{seqtk} sample -s {random_seed} {fastq_output_path_max_reads} {number_of_reads_fraction} > {fastq_output_path}"
        subprocess.run(seqtk_sample_command, shell=True, check=True)

    kb_count_reference_genome_out_dir = os.path.join(tmp_dir, f"kb_count_reference_genome_out_dir_{number_of_reads}")
    if not os.path.exists(kb_count_reference_genome_out_dir):
        # kb count, reference genome
        kb_count_standard_index_command = [
            "kb",
            "count",
            "-t",
            str(threads),
            "-i",
            reference_genome_index_path,
            "-g",
            reference_genome_t2g_path,
            "-x",
            "bulk",
            "--h5ad",
            "--parity",
            "single",
            "--strand",
            strand,
            "-o",
            kb_count_reference_genome_out_dir,
        ]

        print(f"kb count, reference genome, {number_of_reads} reads")
        subprocess.run(kb_count_standard_index_command, check=True)
            
    #* Variant calling: varseek
    print(f"varseek, {number_of_reads} reads")
    output_file = os.path.join(output_dir, f"vk_count_threads_{threads}_reads_{number_of_reads}_time_and_memory.txt")
    vk_count_out_tmp = os.path.join(tmp_dir, f"vk_count_threads_{threads}_reads_{number_of_reads}_out")
    argparse_flags = f"--index {vk_ref_index_path} --t2g {vk_ref_t2g_path} --out {vk_count_out_tmp} --kb_count_reference_genome_out_dir {kb_count_reference_genome_out_dir} --disable_summarize {fastq_output_path}"
    _ = report_time_and_memory_of_script(vk_count_script_path, output_file = output_file, argparse_flags = argparse_flags)

    os.remove(fastq_output_path)

# delete temp directory
# os.system(f"rm -rf {tmp_dir}")  #!!! uncomment later to delete tmp directory
