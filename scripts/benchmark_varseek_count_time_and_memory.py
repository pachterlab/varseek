import os
import random
import pysam
import subprocess
import pandas as pd
import numpy as np
import varseek as vk
from varseek.utils import report_time_and_memory_of_script, run_command_with_error_logging
all_supported_tools_to_benchmark = {"varseek", "gatk_haplotypecaller", "gatk_mutect2", "strelka2", "varscan"}

### ARGUMENTS ###
number_of_reads_list = [1, 4, 16, 64, 256, 1024]  # number of reads, in millions
tools_to_benchmark = ["varseek", "gatk_haplotypecaller", "gatk_mutect2", "strelka2", "varscan"]
run_alternative_variant_calling = True

read_length = 150
k = 59
w = 54
strand = None  # None for strand-agnostic (randomly-selected), "f" for forward, "r" for reverse, "both" for both - make sure this matches the reference genome (vk build command) - strand = True -> "f" or "r" here; strand = False -> None or "both" here - note that the strand is randomly selected per *transcript*, such that all drawn reads will come from the same strand no matter what
add_noise_sequencing_error = True
add_noise_base_quality = False
error_rate=0.0001  # only if add_noise_sequencing_error=True
error_distribution=(0.85, 0.1, 0.05)  # sub, del, ins  # only if add_noise_sequencing_error=True
max_errors=float("inf")  # only if add_noise_sequencing_error=True
seq_id_column="seq_ID"
mut_column="mutation"
threads = 4
random_seed=42

vk_ref_index_path = "/Users/joeyrich/Documents/Caltech/Pachter/reference/varseek/cosmic_cmc_cdna_Jan25/index.idx"  # for vk count
vk_ref_t2g_path = "/Users/joeyrich/Documents/Caltech/Pachter/reference/varseek/cosmic_cmc_cdna_Jan25/t2g.txt"  # for vk count

cosmic_mutations_path = "cosmic_cmc"  # for vk sim   # can replace with path to csv file generated by gget cosmic
reference_cdna_path = "cdna"  # for vk sim   # can replace with path to cdna fasta file (such as that downloaded by gget ref)
reference_genome_fasta = "/Users/joeyrich/Documents/Caltech/Pachter/reference/ensembl/grch37_release93/Homo_sapiens.GRCh37.dna.primary_assembly.fa"  # for alternative variant calling  #!!!
reference_genome_gtf = "/Users/joeyrich/Documents/Caltech/Pachter/reference/ensembl/grch37_release93/Homo_sapiens.GRCh37.87.gtf"  # for alternative variant calling
genomes1000_vcf = "/home/jrich/data/varseek_data/reference/ensembl/grch37_release93/1000GENOMES-phase_3.vcf"

opt_dir = "/home/jrich/opt"
STAR = os.path.join(opt_dir, "STAR-2.7.11b/bin/Linux_x86_64/STAR")
java = "/home/jrich/opt/java/jdk-17.0.12+7/bin/java"
picard_jar = "/home/jrich/opt/picard/build/libs/picard.jar"
gatk = "/home/jrich/opt/gatk-4.6.0.0/gatk"
STRELKA_INSTALL_PATH = os.path.join(opt_dir, "strelka-2.9.10.centos6_x86_64")
VARSCAN_INSTALL_PATH = os.path.join(opt_dir, "VarScan.v2.3.9.jar")

tmp_dir = "tmp"
output_dir = "/Users/joeyrich/Desktop/local/varseek/logs"
reference_out_dir = "/Users/joeyrich/Documents/Caltech/Pachter/reference"
### ARGUMENTS ###

# set random seeds
random.seed(random_seed)
np.random.seed(random_seed)

os.makedirs(opt_dir, exist_ok=True)

# define tmp subdirectories (to be deleted at the end)
os.makedirs(tmp_dir)  # purposely not using exist_ok=True to ensure that the directory is non-existent
out_dir_vk_build = os.path.join(tmp_dir, "vk_build")
update_df_out = os.path.join(out_dir_vk_build, "updated_df.csv")

script_dir = os.path.dirname(os.path.abspath(__file__))  # the parent directory of this current file (this file should be in scripts/)
vk_count_script_path = os.path.join(script_dir, "run_varseek_count_for_benchmarking_time_and_memory.py")
gatk_haplotypecaller_script_path = os.path.join(script_dir, "run_gatk_for_benchmarking_time_and_memory.py")
gatk_mutect2_script_path = os.path.join(script_dir, "run_gatk_for_benchmarking_time_and_memory.py")
strelka_script_path = os.path.join(script_dir, "run_strelka_for_benchmarking_time_and_memory.py")
varscan_script_path = os.path.join(script_dir, "run_varscan_for_benchmarking_time_and_memory.py")

# create synthetic reads
if k and w:
    assert k > w, "k must be greater than w"
    read_w = read_length - (k - w)  # note that this does not affect read length, just read *parent* length
else:
    read_w = read_length - 1


for tool in tools_to_benchmark:
    if tool not in all_supported_tools_to_benchmark:
        raise ValueError(f"Tool {tool} is not supported. Supported tools are: {all_supported_tools_to_benchmark}")
run_alternative_variant_calling = True if tools_to_benchmark != ["varseek"] else False

# make the read parent df
vk.build(
    sequences=reference_cdna_path,
    mutations=cosmic_mutations_path,
    out=out_dir_vk_build,
    reference_out_dir=reference_out_dir,
    w=read_w,
    k=k,
    remove_seqs_with_wt_kmers=False,
    optimize_flanking_regions=False,
    required_insertion_overlap_length=None,
    max_ambiguous=None,
    merge_identical=False,
    min_seq_len=read_length,
    cosmic_email=os.getenv("COSMIC_EMAIL"),
    cosmic_password=os.getenv("COSMIC_PASSWORD"),
    save_mutations_updated_csv=True,
    mutations_updated_csv_out=update_df_out,
    seq_id_column=seq_id_column,  # uncomment for genome support
    mut_column=mut_column,
)

mutation_metadata_df = pd.read_csv(update_df_out)

mutation_metadata_df.rename(columns={"mutant_sequence": "mutant_sequence_read_parent", "wt_sequence": "wt_sequence_read_parent"}, inplace=True)
mutation_metadata_df["mutant_sequence_read_parent_rc"] = mutation_metadata_df["mutant_sequence_read_parent"].apply(vk.varseek_build.reverse_complement)
mutation_metadata_df["mutant_sequence_read_parent_length"] = mutation_metadata_df["mutant_sequence_read_parent"].str.len()

mutation_metadata_df["wt_sequence_read_parent_rc"] = mutation_metadata_df["wt_sequence_read_parent"].apply(vk.varseek_build.reverse_complement)
mutation_metadata_df["wt_sequence_read_parent_length"] = mutation_metadata_df["wt_sequence_read_parent"].str.len()

mutation_metadata_df_length = len(mutation_metadata_df)

#* Download varseek index
if not os.path.exists(vk_ref_index_path) or not os.path.exists(vk_ref_t2g_path):
    vk_ref_index_dir = os.path.dirname(vk_ref_index_path)
    vk_ref_index_path = os.path.join(vk_ref_index_dir, "index.idx")
    vk_ref_t2g_path = os.path.join(vk_ref_index_dir, "t2g.txt")
    print(f"Downloading varseek index to {vk_ref_index_dir}")
    vk.ref(download="cosmic_cmc_cdna", out=vk_ref_index_dir)

#* Download/build alternative variant calling tools
if run_alternative_variant_calling:
    #* Download reference genome information
    reference_genome_fasta_url = "https://ftp.ensembl.org/pub/grch37/release-93/fasta/homo_sapiens/dna/Homo_sapiens.GRCh37.dna.primary_assembly.fa.gz"
    reference_genome_gtf_url = "https://ftp.ensembl.org/pub/grch37/release-93/gtf/homo_sapiens/Homo_sapiens.GRCh37.87.gtf.gz"
    genomes1000_vcf_url = "https://ftp.ensembl.org/pub/grch37/release-93/variation/vcf/homo_sapiens/1000GENOMES-phase_3.vcf.gz"

    os.makedirs(os.path.dirname(reference_genome_fasta), exist_ok=True)
    download_reference_genome_fasta_command = ["wget", "-O", f"{reference_genome_fasta}.gz", reference_genome_fasta_url]
    unzip_reference_genome_fasta_command = ["gunzip", "-O", f"{reference_genome_fasta}.gz"]

    os.makedirs(os.path.dirname(reference_genome_gtf), exist_ok=True)
    download_reference_genome_gtf_command = ["wget", "-O", f"{reference_genome_gtf}.gz", reference_genome_gtf_url]
    unzip_reference_genome_gtf_command = ["gunzip", "-O", f"{reference_genome_gtf}.gz"]

    os.makedirs(os.path.dirname(genomes1000_vcf), exist_ok=True)
    download_1000_genomes_command = ["wget", "-O", f"{genomes1000_vcf}.gz", genomes1000_vcf_url]
    unzip_1000_genomes_command = ["gunzip", "-O", f"{genomes1000_vcf}.gz"]

    if not os.path.exists(reference_genome_fasta):
        run_command_with_error_logging(download_reference_genome_fasta_command)
        run_command_with_error_logging(unzip_reference_genome_fasta_command)

    if not os.path.exists(reference_genome_gtf):
        run_command_with_error_logging(download_reference_genome_gtf_command)
        run_command_with_error_logging(unzip_reference_genome_gtf_command)

    if not os.path.exists(genomes1000_vcf):
        run_command_with_error_logging(download_1000_genomes_command)
        run_command_with_error_logging(unzip_1000_genomes_command)

    read_length_minus_one = read_length - 1
    star_genome_dir = os.path.join(tmp_dir, "star_genome")
    os.makedirs(star_genome_dir, exist_ok=True)

    if not os.path.exists(STAR):
        star_tarball = os.path.join(opt_dir, "2.7.11b.tar.gz")
        subprocess.run(["wget", "-O", star_tarball, "https://github.com/alexdobin/STAR/archive/2.7.11b.tar.gz"], check=True)
        subprocess.run(["tar", "-xzf", star_tarball, "-C", opt_dir], check=True)

    #* Build STAR index
    star_build_command = [
        STAR,
        "--runThreadN", str(threads),
        "--runMode", "genomeGenerate",
        "--genomeDir", star_genome_dir,
        "--genomeFastaFiles", reference_genome_fasta,
        "--sjdbGTFfile", reference_genome_gtf,
        "--sjdbOverhang", str(read_length_minus_one),
    ]

    if not os.listdir(star_genome_dir):
        run_command_with_error_logging(star_build_command)

    #* Index reference genome
    if not os.path.exists(f"{reference_genome_fasta}.fai"):
        _ = pysam.faidx(reference_genome_fasta)

    #* Index 1000 genomes standard variants
    index_feature_file_command = [
        gatk, "IndexFeatureFile",
        "-I", genomes1000_vcf
    ]

    if not os.path.exists(f"{genomes1000_vcf}.idx"):
        run_command_with_error_logging(index_feature_file_command)

    if not os.path.exists(STRELKA_INSTALL_PATH):
        strelka_tarball = f"{STRELKA_INSTALL_PATH}.tar.bz2"
        subprocess.run(["wget", "-O", strelka_tarball, "https://github.com/Illumina/strelka/releases/download/v2.9.10/strelka-2.9.10.centos6_x86_64.tar.bz2"], check=True)
        subprocess.run(["tar", "-xvjf", strelka_tarball, "-C", opt_dir], check=True)

    if not os.path.exists(VARSCAN_INSTALL_PATH):
        subprocess.run(["wget", "-O", VARSCAN_INSTALL_PATH, "https://sourceforge.net/projects/varscan/files/VarScan.v2.3.9.jar/download"], check=True)


#* Run variant calling tools
for number_of_reads in number_of_reads_list:
    #* Building synthetic reads
    number_of_reads *= 10**6  # convert to millions
    number_of_mutations_to_sample = mutation_metadata_df_length // 200
    fastq_output_path = os.path.join(tmp_dir, f"reads_{number_of_reads}_fastq.fastq")

    print(f"Building synthetic reads for {number_of_reads} reads")
    _ = vk.sim(
        mutation_metadata_df = mutation_metadata_df,
        fastq_output_path = fastq_output_path,
        sample_type="all",
        number_of_mutations_to_sample=number_of_mutations_to_sample,
        strand=strand,
        number_of_reads_per_sample=100,  # 100 mutant, 100 wild-type
        read_length=read_length,
        seed=None,
        add_noise_sequencing_error=add_noise_sequencing_error,
        add_noise_base_quality=add_noise_base_quality,
        error_rate=error_rate,
        error_distribution=error_distribution,
        max_errors=max_errors,
        with_replacement=False,
    )

    #* Variant calling: varseek
    if "varseek" in tools_to_benchmark:
        print(f"varseek, {number_of_reads} reads")
        output_file = os.path.join(output_dir, f"vk_count_threads_{threads}_reads_{number_of_reads}_time_and_memory.txt")
        argparse_flags = f"--index {vk_ref_index_path} --t2g {vk_ref_t2g_path} --fastq {fastq_output_path}"  #!!! ensure that no filtering/processing is done by fastqpp or clean
        _ = report_time_and_memory_of_script(vk_count_script_path, output_file = output_file, argparse_flags = argparse_flags)
    
    if "gatk_haplotypecaller" in tools_to_benchmark:
        #* Variant calling: GATK HaplotypeCaller
        print(f"GATK HaplotypeCaller, {number_of_reads} reads")
        output_file = os.path.join(output_dir, f"gatk_haplotypecaller_threads_{threads}_reads_{number_of_reads}_time_and_memory.txt")
        argparse_flags = f"--synthetic_read_fastq {fastq_output_path} --reference_genome_fasta {reference_genome_fasta} --reference_genome_gtf {reference_genome_gtf} --star_genome_dir {star_genome_dir} --threads {threads} --read_length {read_length} --STAR {STAR} --java {java} --picard_jar {picard_jar} --gatk {gatk}"
        _ = report_time_and_memory_of_script(gatk_haplotypecaller_script_path, output_file = output_file, argparse_flags = argparse_flags)

    if "gatk_mutect2" in tools_to_benchmark:
        #* Variant calling: GATK Mutect2
        print(f"GATK Mutect2, {number_of_reads} reads")
        output_file = os.path.join(output_dir, f"gatk_mutect2_threads_{threads}_reads_{number_of_reads}_time_and_memory.txt")
        argparse_flags = f"--synthetic_read_fastq {fastq_output_path} --reference_genome_fasta {reference_genome_fasta} --reference_genome_gtf {reference_genome_gtf} --star_genome_dir {star_genome_dir} --threads {threads} --read_length {read_length} --STAR {STAR} --java {java} --picard_jar {picard_jar} --gatk {gatk}"
        _ = report_time_and_memory_of_script(gatk_mutect2_script_path, output_file = output_file, argparse_flags = argparse_flags)

    if "strelka2" in tools_to_benchmark:
        #* Variant calling: Strelka2
        print(f"Strelka2, {number_of_reads} reads")
        output_file = os.path.join(output_dir, f"strelka2_threads_{threads}_reads_{number_of_reads}_time_and_memory.txt")
        argparse_flags = f"--synthetic_read_fastq {fastq_output_path} --reference_genome_fasta {reference_genome_fasta} --reference_genome_gtf {reference_genome_gtf} --star_genome_dir {star_genome_dir} --threads {threads} --read_length {read_length} --STRELKA_INSTALL_PATH {STRELKA_INSTALL_PATH}"
        _ = report_time_and_memory_of_script(strelka_script_path, output_file = output_file, argparse_flags = argparse_flags)

    if "varscan" in tools_to_benchmark:
        #* Variant calling: VarScan
        print(f"VarScan, {number_of_reads} reads")
        output_file = os.path.join(output_dir, f"varscan_threads_{threads}_reads_{number_of_reads}_time_and_memory.txt")
        argparse_flags = f"--synthetic_read_fastq {fastq_output_path} --reference_genome_fasta {reference_genome_fasta} --reference_genome_gtf {reference_genome_gtf} --star_genome_dir {star_genome_dir} --threads {threads} --read_length {read_length} --VARSCAN_INSTALL_PATH {VARSCAN_INSTALL_PATH}"
        _ = report_time_and_memory_of_script(varscan_script_path, output_file = output_file, argparse_flags = argparse_flags)

    os.remove(fastq_output_path)

# delete temp directory
# os.system(f"rm -rf {tmp_dir}")  #!!! uncomment later to delete tmp directory
